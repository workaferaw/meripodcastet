// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Content Types

// Article
{
  title: string;
  slug: string;
  content: richtext;
  excerpt: text;
  category: string;
  featuredImage: media;
  publishedAt: datetime;
}

// Episode
{
  title: string;
  description: richtext;
  audioUrl: string;
  duration: number;
  guests: relation[Guest];
  publishedAt: datetime;
}

// Guest
{
  name: string;
  bio: richtext;
  image: media;
  socialLinks: json;
  episodes: relation[Episode];
}

// Partnership
{
  name: string;
  email: string;
  company: string;
  message: text;
  status: enum['pending', 'approved', 'rejected'];
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  accessKey String
  name      String?
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Article {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String   @db.Text
  excerpt     String?
  category    String
  image       String?
  publishedAt DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Guest {
  id          String    @id @default(cuid())
  name        String
  bio         String    @db.Text
  image       String?
  socialLinks Json?
  episodes    Episode[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Episode {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  audioUrl    String?
  duration    Int?
  guests      Guest[]
  publishedAt DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FormSubmission {
  id        String   @id @default(cuid())
  type      String   // 'partnership' | 'guest-suggestion'
  data      Json
  status    Status   @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Analytics {
  id        String   @id @default(cuid())
  type      String   // 'pageView' | 'articleRead' | 'episodePlay'
  data      Json
  createdAt DateTime @default(now())
}

enum Role {
  ADMIN
  EDITOR
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}
